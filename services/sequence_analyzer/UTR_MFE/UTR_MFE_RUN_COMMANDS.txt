================================================================================
  5' UTR / MFE Test - How to Run in Docker Environment
================================================================================

PROJECT LOCATION:
  /mnt/c/Users/xiayh17/Documents/GitHub/CodonVerifier

DOCKER ENVIRONMENT:
  services/sequence_analyzer/Dockerfile
  ✓ Python 3.10
  ✓ ViennaRNA 2.6.4 (pre-installed)
  ✓ All scientific packages

================================================================================
  METHOD 1: Quick Scripts (RECOMMENDED)
================================================================================

Linux / WSL / Mac:
  cd /mnt/c/Users/xiayh17/Documents/GitHub/CodonVerifier
  ./run_mfe_test_docker.sh

Windows CMD/PowerShell:
  cd C:\Users\xiayh17\Documents\GitHub\CodonVerifier
  run_mfe_test_docker.bat

================================================================================
  METHOD 2: Manual Docker Commands
================================================================================

Step 1 - Build Docker image:
  cd /mnt/c/Users/xiayh17/Documents/GitHub/CodonVerifier
  docker build -t sequence-analyzer -f services/sequence_analyzer/Dockerfile .

Step 2 - Verify ViennaRNA:
  docker run --rm sequence-analyzer RNAfold --version

Step 3 - Run test:
  docker run --rm -v $(pwd):/workspace -w /workspace \
    sequence-analyzer python3 test_utr_mfe_demo.py

================================================================================
  METHOD 3: Interactive Testing
================================================================================

Start interactive shell:
  docker run --rm -it -v $(pwd):/workspace -w /workspace \
    sequence-analyzer bash

Inside container:
  cd /workspace
  python3 test_utr_mfe_demo.py

Or test directly in Python:
  python3
  >>> from codon_verifier.metrics import five_prime_utr_mfe_analysis
  >>> dna = "ATGGCTCCACGAGGGTTCAGCTGTCTCTTACTTTCAACCAGTGAAATTGACCTGCCCGTGAAGAGGCGGACATAA"
  >>> result = five_prime_utr_mfe_analysis(dna, utr5_len=0, temperature=37.0)
  >>> print(result)

================================================================================
  METHOD 4: Local Python (Without Docker)
================================================================================

If ViennaRNA is installed locally:
  cd /mnt/c/Users/xiayh17/Documents/GitHub/CodonVerifier
  python3 test_utr_mfe_demo.py

Note: Will show "ViennaRNA not available" if not installed, but logic still works

================================================================================
  EXPECTED OUTPUT (With ViennaRNA)
================================================================================

5' UTR / mRNA Structure MFE Analysis - Demo and Test
================================================================================

Test Case 1: HMN1_HUMAN - 24aa, 75nt
Protein:  MAPRGFSCLLLSTSEIDLPVKRRT*
CDS:      ATGGCTCCACGAGGGTTCAGCTGTCTCTTACTTTCAACCAGTGAAATTGACCTGCCCGTG...
Length:   75 nt
UTR5 len: 0 nt

Results:
  mfe_5p_dG:      -8.20 kcal/mol  ← Real MFE value!
  mfe_global_dG:  -15.30 kcal/mol
  mfe_5p_note:    no_utr_fallback
  ✓ Note matches expected: 'no_utr_fallback'

Interpretation:
  • UTR length (0nt) < 20: fallback to [+1..+50] window
  • 5' region: positions [+1..+50] = 50nt analyzed
  • Global MFE: entire 75nt sequence
  • 5' structure: moderately structured (ΔG = -8.20)

[... 6 more test cases ...]

================================================================================
  TROUBLESHOOTING
================================================================================

Problem: Docker not found
Solution:
  # Install Docker Desktop (Windows/Mac) or Docker Engine (Linux)
  # Verify: docker --version

Problem: Permission denied (WSL)
Solution:
  chmod +x run_mfe_test_docker.sh
  ./run_mfe_test_docker.sh

Problem: Build fails
Solution:
  # Clear Docker cache and rebuild
  docker build --no-cache -t sequence-analyzer \
    -f services/sequence_analyzer/Dockerfile .

Problem: Module not found
Solution:
  # Ensure correct working directory
  cd /mnt/c/Users/xiayh17/Documents/GitHub/CodonVerifier
  # Ensure volume mount is correct
  docker run --rm -v "$(pwd):/workspace" -w /workspace ...

================================================================================
  FILES CREATED
================================================================================

Implementation:
  ✓ codon_verifier/metrics.py (modified with new functions)

Test & Demo:
  ✓ test_utr_mfe_demo.py (comprehensive test with real data)

Documentation:
  ✓ UTR_MFE_IMPLEMENTATION.md (technical details)
  ✓ BEFORE_AFTER_COMPARISON.md (what changed)
  ✓ RUN_IN_DOCKER.md (Docker instructions)
  ✓ QUICK_START.md (quick reference)
  ✓ RUN_COMMANDS.txt (this file)

Scripts:
  ✓ run_mfe_test_docker.sh (Linux/Mac/WSL)
  ✓ run_mfe_test_docker.bat (Windows)

================================================================================
  WHAT WAS IMPLEMENTED
================================================================================

✓ Two-tier window logic:
    - UTR >= 20: [-20..+50] window (or [+1..+50] if CDS-only)
    - UTR < 20:  [+1..+50] with "no_utr_fallback" note

✓ Global MFE calculation:
    - Entire CDS sequence analyzed

✓ Temperature fixed at 37°C:
    - All folding at mammalian expression temperature

✓ DNA→RNA conversion:
    - Proper T→U conversion before folding

✓ Complete output fields:
    - mfe_5p_dG:      5' region MFE
    - mfe_global_dG:  Global sequence MFE
    - mfe_5p_note:    Analysis mode description

================================================================================
  INTEGRATION EXAMPLE
================================================================================

# In your pipeline:
from codon_verifier.metrics import rules_score

result = rules_score(
    dna=my_sequence,
    usage=codon_usage_table,
    utr5_len=0,         # or your UTR length
    temperature=37.0    # fixed at 37°C
)

# Access new fields:
five_prime_mfe = result['mfe_5p_dG']      # 5' region MFE
global_mfe = result['mfe_global_dG']      # Full sequence MFE
analysis_note = result['mfe_5p_note']     # Analysis mode

================================================================================

For detailed documentation, see:
  - UTR_MFE_IMPLEMENTATION.md
  - RUN_IN_DOCKER.md
  - QUICK_START.md

================================================================================

